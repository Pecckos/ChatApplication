@{
    ViewData["Title"] = "PecckosChat Rum";
}
@model IEnumerable<PecckosChatProgram.Models.ChatMessage>

<div class="container chat-container py-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card chat-card shadow-lg border-0">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">
                        <i class="bi bi-chat-dots me-2"></i>PecckosChat Rum
                    </h1>
                    <span class="badge bg-success">Online ðŸŸ¢</span>
                </div>

                <div class="card-body chat-messages" style="height: 400px; overflow-y: auto;">
                    @foreach (var message in Model)
                    {
                        var userColor = $"#{(message.UserName.GetHashCode() & 0xFFFFFF):X6}";
                        <div class="message mb-3 animate__animated animate__fadeIn" data-user-color="@userColor">
                            <div class="d-flex">
                                <div class="avatar me-3 flex-shrink-0">
                                    <img src="https://ui-avatars.com/api/?name=@message.UserName&background=@userColor.Substring(1)" 
                                         class="rounded-circle" 
                                         width="40" 
                                         height="40" 
                                         alt="@message.UserName">
                                </div>
                                <div class="message-content flex-grow-1">
                                    <div class="d-flex justify-content-between align-items-baseline">
                                        <strong>@message.UserName</strong>
                                        <small class="text-muted ms-2">@message.TimeStamp.ToString("HH:mm")</small>
                                    </div>
                                    <p class="p-2 rounded mb-0 message-bubble" style="background-color: @userColor; color: white;">@message.Message</p>
                                </div>
                            </div>
                        </div>
                    }
                    <div id="chatMessages">
                        <!-- Meddelanden kommer att lÃ¤ggas till hÃ¤r av SignalR-klienten -->
                    </div>
                </div>

                <div class="card-footer bg-light">
                    <form id="chatform" asp-controller="Chat" asp-action="SendMessage" method="post">
                        <div class="input-group mb-3">
                            <input id="userName" type="text" name="UserName" class="form-control" placeholder="Ditt namn" required/>
                        </div>
                        <div class="input-group">
                            <input id="message" type="text" name="Message" class="form-control" placeholder="Skriv ett meddelande..."/>
                            <button class="btn btn-primary" type="submit">
                                <i class="bi bi-send"></i> Skicka
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        .chat-container {
            background: linear-gradient(135deg, #c4aea8 100%);
            min-height: 100vh;
        }
        .chat-card {
            border-radius: 15px;
            overflow: hidden;
        }
        .chat-messages {
            background-color: #f8f9fa;
        }
        .message-content {
            max-width: 80%;
        }
        .message-bubble {
            display: inline-block;
            max-width: 100%;
            word-wrap: break-word;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>
        function stringToColor(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            const r = (hash & 0x7F) + 128;
            const g = ((hash >> 8) & 0x7F) + 128;
            const b = ((hash >> 16) & 0x7F) + 128;
            
            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
        }

        function stringToLighterColor(hex) {
            let r = parseInt(hex.slice(1, 3), 16);
            let g = parseInt(hex.slice(3, 5), 16);
            let b = parseInt(hex.slice(5, 7), 16);

            r = Math.min(255, r + 100);
            g = Math.min(255, g + 100);
            b = Math.min(255, b + 100);

            return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        connection.on("ReceiveMessage", function (message) {
            const messagelist = document.getElementById("chatMessages");
            const userColor = stringToColor(message.userName);
            const lightColor = stringToLighterColor(userColor);
            
            const newMessage = document.createElement("div");
            newMessage.className = "message mb-3 animate__animated animate__fadeIn";
            newMessage.innerHTML = `
                <div class="d-flex">
                    <div class="avatar me-3 flex-shrink-0">
                        <img src="https://ui-avatars.com/api/?name=${message.userName}&background=${lightColor.substring(1)}" 
                             class="rounded-circle" 
                             width="40" 
                             height="40" 
                             alt="${message.userName}">
                    </div>
                    <div class="message-content flex-grow-1">
                        <div class="d-flex justify-content-between align-items-baseline">
                            <strong>${message.userName}</strong>
                            <small class="text-muted ms-2">${new Date(message.timeStamp).toLocaleTimeString()}</small>
                        </div>
                        <p style="background-color: ${lightColor}; color: black;" class="p-2 rounded mb-0 message-bubble">${message.message}</p>
                    </div>
                </div>
            `;
            messagelist.appendChild(newMessage);
            messagelist.scrollTop = messagelist.scrollHeight;
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("chatform").addEventListener("submit", function (event) {
            event.preventDefault();

            const userName = document.getElementById("userName").value;
            const message = document.getElementById("message").value;

            const chatMessage = {
                userName: userName,
                message: message,
                timestamp: new Date().toISOString()
            };

            connection.invoke("SendMessage", chatMessage).catch(function (err) {
                return console.error(err.toString());
            });

            document.getElementById("message").value = "";
        });

        // Applicera ljusare fÃ¤rger pÃ¥ existerande meddelanden
        document.querySelectorAll('.message').forEach(function(messageElement) {
            var userColor = messageElement.dataset.userColor;
            var lightColor = stringToLighterColor(userColor);
            var messageBubble = messageElement.querySelector('.message-bubble');
            messageBubble.style.backgroundColor = lightColor;
            messageBubble.style.color = 'black';
        });
    </script>
}
