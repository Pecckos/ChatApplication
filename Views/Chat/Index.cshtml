 @{
    ViewData["Title"] = "Chat";
}
@model IEnumerable<PecckosChatProgram.Models.ChatMessage>

<style>
    .message-bubble {
        display: inline-block;
        max-width: 80%;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
</style>

<div class="container chat-container py-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card chat-card shadow-lg border-0">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">
                        <i class="bi bi-chat-dots me-2"></i>PecckosChatRoom
                    </h1>
                    <span>Inloggad som: @User.Identity?.Name</span>
                    <span class="badge bg-success">Online 🟢</span>
                </div>

                <div class="card-body chat-messages" style="height: 400px; overflow-y: auto;">
               @foreach (var message in Model)
                {
                    var userColor = $"#{(message.User.UserName.GetHashCode() & 0xFFFFFF):X6}";
                    <div class="message mb-3 animate__animated animate__fadeIn" data-user-color="@userColor">
                        <div class="d-flex">
                            <div class="avatar me-3 flex-shrink-0">
                                <img src="https://ui-avatars.com/api/?name=@message.User.UserName&background=@userColor.Substring(1)" 
                                    class="rounded-circle" 
                                    width="40" 
                                    height="40" 
                                    alt="@message.User.UserName">
                            </div>
                            <div class="message-content flex-grow-1">
                                <div class="d-flex justify-content-between align-items-baseline">
                                    <strong>@message.User.UserName</strong>
                                    <small class="text-muted ms-2">@message.TimeStamp.ToString("HH:mm")</small>
                                </div>
                                <p class="p-2 rounded mb-0 message-bubble" style="background-color: @userColor; color: white;">@message.MessagesChat</p>
                            </div>
                        </div>
                    </div>
                }
                    <div id="chatMessages">
                        <!-- Meddelanden kommer att läggas till här av SignalR-klienten -->
                    </div>
                </div>

                <div class="card-footer bg-light">
                    <form id="chatform" method="post">
                        <div class="input-group">
                            <input id="MessagesChat" type="text" name="MessagesChat" class="form-control" placeholder="Skriv ett meddelande..."/>
                            <button class="btn btn-primary" type="submit">
                                <i class="bi bi-send"></i> Skicka
                            </button>
                        </div>
                    </form>
                    <a asp-controller="Account" asp-action="Logout" class="btn btn-danger mt-2">Logga ut</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>
    const connection = new signalR.HubConnectionBuilder()
            .withUrl("/ChatHub")
            .build();

    // Starta anslutningen om den inte redan är aktiv
    async function startConnection() {
        try {
            if (connection.state === signalR.HubConnectionState.Disconnected) {
                await connection.start();
                console.log("✅ SignalR connected successfully!");
            } else {
                console.log("⚠️ SignalR is already connected.");
            }
        } catch (err) {
            console.error("❌ Error connecting to SignalR:", err);
            setTimeout(startConnection, 5000); // Försök igen om det misslyckas
        }
    }

    // Starta SignalR vid sidladdning
    startConnection();

    // Om anslutningen tappas, försök att återansluta
    connection.onclose(async () => {
        console.log("🔄 SignalR disconnected. Reconnecting...");
        await startConnection();
    });

    // Endast en definition av "ReceiveMessage" för att undvika problem
connection.on("ReceiveMessage", function (user, message, timestamp) {
    const messagelist = document.getElementById("chatMessages");
    
    function stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const r = (hash & 0x7F) + 128;
        const g = ((hash >> 8) & 0x7F) + 128;
        const b = ((hash >> 16) & 0x7F) + 128;
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }
    function stringToLighterColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const r = (hash & 0x7F) + 128;
        const g = ((hash >> 8) & 0x7F) + 128;
        const b = ((hash >> 16) & 0x7F) + 128;
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }

    const userColor = stringToColor(user);
    const lightColor = stringToLighterColor(user);

    const newMessage = document.createElement("div");
    newMessage.className = "message mb-3 animate__animated animate__fadeIn";
    newMessage.innerHTML = `
        <div class="d-flex">
            <div class="avatar me-3 flex-shrink-0">
                <img src="https://ui-avatars.com/api/?name=${user}&background=${lightColor.substring(1)}" 
                    class="rounded-circle" 
                    width="40" 
                    height="40" 
                    alt="${user}">
            </div>
            <div class="message-content flex-grow-1">
                <div class="d-flex justify-content-between align-items-baseline">
                    <strong>${user}</strong>
                    <small class="text-muted ms-2">${new Date(timestamp).toLocaleTimeString('sv-SE', { hour: '2-digit', minute: '2-digit', hour12: false })}</small>
                </div>
                <p style="background-color: ${lightColor}; color: black;" class="p-2 rounded mb-0 message-bubble">${message}</p>
            </div>
        </div>
    `;
    messagelist.appendChild(newMessage);
    messagelist.scrollTop = messagelist.scrollHeight;
});

    // Event listener för formulärsändning
    document.getElementById("chatform").addEventListener("submit", function (event) {
    event.preventDefault();

    const message = document.getElementById("MessagesChat").value;
    const userName = '@User.Identity?.Name';

    console.log("Formulär skickat!");
    console.log("Användarnamn:", userName);
    console.log("Meddelande:", message);

    // Skicka meddelandet till SignalR
    connection.send("SendMessage", userName, message)
    .then(() => {
        console.log("Meddelandet skickades till SignalR!");
    })
    .catch(function (err) {
        console.log("Fel vid sändning till SignalR:", err.toString());
    });

    // Skicka meddelandet till kontrollern för att spara i databasen
    fetch('/Chat/SendMessage', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ MessagesChat: message })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("Meddelandet sparades i databasen!");
        } else {
            console.error("Misslyckades att spara meddelandet i databasen");
        }
    })
    .catch(err => {
        console.log("Fel vid sändning till servern:", err);
    });

    document.getElementById("MessagesChat").value = "";
});
</script>
}
